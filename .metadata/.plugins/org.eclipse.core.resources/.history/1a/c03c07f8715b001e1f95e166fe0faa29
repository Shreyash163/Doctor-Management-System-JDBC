package com.amdocs.DBConnection;

import  com.amdocs.DBConnection.DbConnection;
import  com.amdocs.DBConnection.DoctorFunctions;
import java.sql.*;
import java.util.Scanner;

public class DoctorFunctions 
{
	static DbConnection dbConnect =	new DbConnection();
	
	
	static Connection con1 = dbConnect.getConnection();
	
	 public static void addDoctor(String name ,String specialization,String availability , double fees) throws SQLException
	 {
	        PreparedStatement preparedStatement = con1.prepareStatement("INSERT INTO DoctorInfo (name, specialization, consultation_fees, availability) VALUES (?, ?, ?, ?)");
	        preparedStatement.setString(1, name);
	        preparedStatement.setString(2, specialization);
	        preparedStatement.setDouble(3, fees);
	        preparedStatement.setString(4, availability);
	        
	        int rowsAffected = preparedStatement.executeUpdate();
	        if (rowsAffected > 0) {
	            System.out.println("Doctor added successfully!");
	        } else {
	            System.out.println("Failed to add doctor.");
	        }
	    }
	 
	 public static void viewALLDoctors() throws SQLException
	 {	
		 String sql = "SELECT * FROM DoctorInfo";
		 PreparedStatement st = con1.prepareStatement(sql);
		 try {
			 
			  System.out.println("after select");
	            // Execute the query
	            ResultSet resultSet = st.executeQuery(sql);

	            // Process and display the query results
	            while (resultSet.next()) {
	                // Retrieve data from the result set
	                int id = resultSet.getInt("id"); // Replace "id" with your column name
	                String name = resultSet.getString("name"); 
	                String specialization= resultSet.getString("SPECIALIZATION");// Replace "name" with your column name
	                double fees = resultSet.getDouble("CONSULTATION_FEES");
	                String availability = resultSet.getString("AVAILABILITY");
	                		// Add more columns as needed

	                // Display the data
	                System.out.println("ID: " + id + "  Name: " + name +" SPECIALIZATION : " + specialization + " CONSULTATION_FEES : " + fees + " AVAILABILITY : " + availability);
	                // Print additional columns here as needed
	            }
		 }
	            
	      catch(Exception e)
	      {
	    	  System.out.println(e);
	      }
		 }
	 
	 public static void deleteDoctor( String deleteName)
	 {
		 String delete = "Delete from DoctorInfo where NAME = ?";
		 try {
		 PreparedStatement st = con1.prepareStatement(delete);
		 st.setString(1, deleteName);
		 int rows = st.executeUpdate();
		 if(rows>0)
		 {
			 System.out.println("Record Deleted Successfully");
		 }
		 else {
			 System.out.println("Delete Failed/No such Record found");
		 }
		 
		 }
		 catch(Exception e)
		 {
			 System.out.println(e);
		 }
	 }
		 
	 public static void searchDoctorsByAvailability(Connection con1, String checkShift)
	 {
		 String search = "Select * from DoctorInfo where availability = ?";
		 
		 try {
			 
			 PreparedStatement st = con1.prepareStatement(search);
			
			 st.setString(1, checkShift); // Set the availability parameter

			 ResultSet resultSet = st.executeQuery();
			 while (resultSet.next()) {
			
	                // Retrieve data from the result set
	                int id = resultSet.getInt("id"); // Replace "id" with your column name
	                String name = resultSet.getString("name"); 
	                String specialization= resultSet.getString("SPECIALIZATION");// Replace "name" with your column name
	                double fees = resultSet.getDouble("CONSULTATION_FEES");
	                String availability = resultSet.getString("AVAILABILITY");
	                
	                System.out.println("ID: " + id + "  Name: " + name +" SPECIALIZATION : " + specialization + " CONSULTATION_FEES : " + fees + " AVAILABILITY : " + availability);

			 }
			 
		 }
		 catch(Exception e)
		 {
			 System.out.println(e);
		 }
	 }
	 
	 public static void CountDocShift(Connection con1, String countDocShift)
	 {
		 String search = "Select * from DoctorInfo where availability = ?";
		 int Count=0;
		 try {
			 
			 PreparedStatement st = con1.prepareStatement(search);
			
			 st.setString(1, countDocShift); 

			 ResultSet resultSet = st.executeQuery();
			 while (resultSet.next()) {
				 Count++;      

			 }
			 System.out.println("Number of Doctor Available in "+countDocShift+ " are : "+Count);
			 
		 }
		 catch(Exception e)
		 {
			 System.out.println(e);
		 }
	 }
	 
	 public static void UpdateFees(Connection con1 , int id , double docFees)
	 {
		 
		  String query = "UPDATE DOCTORINFO SET CONSULTATION_FEES = ? where id= ? ";
			 
		  try {
			  PreparedStatement st = con1.prepareStatement(query);
				
				 st.setDouble(1, docFees); 
				 st.setInt(2, id);
				 st.executeUpdate();
				 System.out.println("Doctor fees Updated Successfully");
		  }
		 
		  catch(Exception e)
		  {
			  System.out.println(e);
		  }
	 }
}

